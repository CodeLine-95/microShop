// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: cart.proto

package cart

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartClient is the client API for Cart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartClient interface {
	AddCart(ctx context.Context, in *AddCartReq, opts ...grpc.CallOption) (*CommonResply, error)
	EditCart(ctx context.Context, in *EditCartReq, opts ...grpc.CallOption) (*CommonResply, error)
	DelCart(ctx context.Context, in *DelCartReq, opts ...grpc.CallOption) (*CommonResply, error)
}

type cartClient struct {
	cc grpc.ClientConnInterface
}

func NewCartClient(cc grpc.ClientConnInterface) CartClient {
	return &cartClient{cc}
}

func (c *cartClient) AddCart(ctx context.Context, in *AddCartReq, opts ...grpc.CallOption) (*CommonResply, error) {
	out := new(CommonResply)
	err := c.cc.Invoke(ctx, "/cart.cart/AddCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) EditCart(ctx context.Context, in *EditCartReq, opts ...grpc.CallOption) (*CommonResply, error) {
	out := new(CommonResply)
	err := c.cc.Invoke(ctx, "/cart.cart/EditCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) DelCart(ctx context.Context, in *DelCartReq, opts ...grpc.CallOption) (*CommonResply, error) {
	out := new(CommonResply)
	err := c.cc.Invoke(ctx, "/cart.cart/DelCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServer is the server API for Cart service.
// All implementations must embed UnimplementedCartServer
// for forward compatibility
type CartServer interface {
	AddCart(context.Context, *AddCartReq) (*CommonResply, error)
	EditCart(context.Context, *EditCartReq) (*CommonResply, error)
	DelCart(context.Context, *DelCartReq) (*CommonResply, error)
	mustEmbedUnimplementedCartServer()
}

// UnimplementedCartServer must be embedded to have forward compatible implementations.
type UnimplementedCartServer struct {
}

func (UnimplementedCartServer) AddCart(context.Context, *AddCartReq) (*CommonResply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCart not implemented")
}
func (UnimplementedCartServer) EditCart(context.Context, *EditCartReq) (*CommonResply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCart not implemented")
}
func (UnimplementedCartServer) DelCart(context.Context, *DelCartReq) (*CommonResply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCart not implemented")
}
func (UnimplementedCartServer) mustEmbedUnimplementedCartServer() {}

// UnsafeCartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServer will
// result in compilation errors.
type UnsafeCartServer interface {
	mustEmbedUnimplementedCartServer()
}

func RegisterCartServer(s grpc.ServiceRegistrar, srv CartServer) {
	s.RegisterService(&Cart_ServiceDesc, srv)
}

func _Cart_AddCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).AddCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.cart/AddCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).AddCart(ctx, req.(*AddCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_EditCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).EditCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.cart/EditCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).EditCart(ctx, req.(*EditCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_DelCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).DelCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.cart/DelCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).DelCart(ctx, req.(*DelCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Cart_ServiceDesc is the grpc.ServiceDesc for Cart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cart.cart",
	HandlerType: (*CartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCart",
			Handler:    _Cart_AddCart_Handler,
		},
		{
			MethodName: "EditCart",
			Handler:    _Cart_EditCart_Handler,
		},
		{
			MethodName: "DelCart",
			Handler:    _Cart_DelCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart.proto",
}
