// Code generated by goctl. DO NOT EDIT!
// Source: account.proto

package user

import (
	"context"

	"microShop/user/rpc/account/types/account"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommonResply = account.CommonResply
	LoginReq     = account.LoginReq
	RegisterReq  = account.RegisterReq
	UserInfoReq  = account.UserInfoReq

	User interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*CommonResply, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*CommonResply, error)
		UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*CommonResply, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*CommonResply, error) {
	client := account.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*CommonResply, error) {
	client := account.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*CommonResply, error) {
	client := account.NewUserClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}
